#include <CompilerLogExplorer/Common.hpp>
#include <CompilerLogExplorer/GCC/Terms.hpp>

#ifndef COMPILER__LOG__EXPLORER__GCC__PARSE__TEMPLATE__BINDING__HPP__INCLUDE__GUARD
#define COMPILER__LOG__EXPLORER__GCC__PARSE__TEMPLATE__BINDING__HPP__INCLUDE__GUARD

namespace CompilerLogExplorer::GCC
{
	constexpr const static auto bindingParser = ctpg::parser(
			bindingList, 
			ctpg::terms(
					cppIdentifier, 
					cppOperator, 
					beginSpecializationList, 
					equalTerm, 
					semiColonTerm, 
					endSquareBracketTerm, 
					cppNumber
				), 
			ctpg::nterms(
					cppAtom, 
					binding, 
					bindingValue, 
					bindingList
				), 
			ctpg::rules(
					cppAtom(cppIdentifier) >= [](auto identifier) {
						return std::string{identifier};
					}, 
					cppAtom(cppOperator) >= [](auto op) {
						return std::string{op};
					}, 
					cppAtom(cppNumber) >= [](auto number) {
						return std::string{number};
					}, 
					bindingValue(cppAtom) >= [](auto atom) {
						return atom;
					}, 
					bindingValue(bindingValue, cppAtom) >= [](auto value, auto atom) {
						return value + std::string{atom};
					}, 
					bindingList(beginSpecializationList) >= [](auto) {
						return json{};
					}, 
					bindingList(bindingList, bindingValue, equalTerm, bindingValue, semiColonTerm) 
					>= [](auto list, auto parameter, auto, auto argument, auto) {
						list[parameter] = argument;
						return list;
					}, 
					bindingList(bindingList, bindingValue, equalTerm, bindingValue, endSquareBracketTerm) 
					>= [](auto list, auto parameter, auto, auto argument, auto) {
						list[parameter] = argument;
						return list;
					}, 
					bindingList(bindingList, endSquareBracketTerm) >= [](auto list) {
						return list;
					}
				)
		);

	static const auto parseBindings(ctpg::buffers::string_buffer toParse) {
		return bindingParser.parse(toParse, std::cerr).value();
	}
}

#endif // COMPILER__LOG__EXPLORER__GCC__PARSE__TEMPLATE__BINDING__HPP__INCLUDE__GUARD

