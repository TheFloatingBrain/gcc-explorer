//[ 18%] Built target libwarp
//Consolidate compiler generated dependencies of target test
//[ 27%] Building CXX object CMakeFiles/test.dir/Test/Terms.cpp.o
//In file included from /root/workdir/Test/Terms.cpp:2:
///root/workdir/Include/Warp/Parsing/Terms.hpp: In instantiation of 
constexpr const auto Warp::Parsing::merge_terms(Terms<LeftPreviousParameterType, LeftPrecedentParameterConstant, LeftTermParameterTypes ...>, Terms<RightPreviousParameterType, RightPrecedentParameterConstant, RightTermParameterTypes ...>) [with LeftPreviousParameterType = Terms<void, 1, TreeTerm<MyTerms::Digits, RegexTerm, Warp::Utilities::FixedString<7>{"[0-9]+"}, Warp::Utilities::FixedString<7>{"Digits"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Dot, CharTerm, '.', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Hello, StringTerm, Warp::Utilities::FixedString<6>{"Hello"}, ctpg::associativity::no_assoc> >; auto LeftPrecedentParameterConstant = 4; LeftTermParameterTypes = {TreeTerm<MyTerms::Plus, CharTerm, '+', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Goodbye, StringTerm, Warp::Utilities::FixedString<8>{"Goodbye"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Minus, CharTerm, '-', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LowercaseLetters, RegexTerm, Warp::Utilities::FixedString<7>{"[a-z]+"}, Warp::Utilities::FixedString<17>{"LowercaseLetters"}, ctpg::associativity::no_assoc>}; RightPreviousParameterType = Terms<void, 2, TreeTerm<MyTerms::Raise, CharTerm, '^', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::OddTokens, RegexTerm, Warp::Utilities::FixedString<10>{"[!@#$%&*]"}, Warp::Utilities::FixedString<14>{"GrammarTokens"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Lower, CharTerm, '_', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Hola, StringTerm, Warp::Utilities::FixedString<5>{"Hola"}, ctpg::associativity::no_assoc> >; auto RightPrecedentParameterConstant = 3; RightTermParameterTypes = {TreeTerm<MyTerms::LeftAngleBracket, CharTerm, '<', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftSquareBracket, CharTerm, '[', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftCurleyBracket, CharTerm, '{', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftParenthesis, CharTerm, '(', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightAngleBracket, CharTerm, '>', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightSquareBracket, CharTerm, ']', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightCurleyBracket, CharTerm, '}', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightParenthesis, CharTerm, ')', ctpg::associativity::no_assoc>};

/*root/workdir/Include/Warp/Parsing/Terms.hpp:406:50:   required from */
constexpr const auto Warp::Parsing::merge_terms(Terms<LeftPreviousParameterType, LeftPrecedentParameterConstant, LeftTermParameterTypes ...>, Terms<RightPreviousParameterType, RightPrecedentParameterConstant, RightTermParameterTypes ...>) [with LeftPreviousParameterType = Terms<Terms<void, 1, TreeTerm<MyTerms::Digits, RegexTerm, Warp::Utilities::FixedString<7>{"[0-9]+"}, Warp::Utilities::FixedString<7>{"Digits"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Dot, CharTerm, '.', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Hello, StringTerm, Warp::Utilities::FixedString<6>{"Hello"}, ctpg::associativity::no_assoc> >, 4, TreeTerm<MyTerms::Plus, CharTerm, '+', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Goodbye, StringTerm, Warp::Utilities::FixedString<8>{"Goodbye"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Minus, CharTerm, '-', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LowercaseLetters, RegexTerm, Warp::Utilities::FixedString<7>{"[a-z]+"}, Warp::Utilities::FixedString<17>{"LowercaseLetters"}, ctpg::associativity::no_assoc> >; auto LeftPrecedentParameterConstant = 5; LeftTermParameterTypes = {TreeTerm<MyTerms::Mumble, StringTerm, Warp::Utilities::FixedString<7>{"Mumble"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Grumble, StringTerm, Warp::Utilities::FixedString<8>{"Grumble"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Fumble, StringTerm, Warp::Utilities::FixedString<7>{"Fumble"}, ctpg::associativity::no_assoc>}; RightPreviousParameterType = Terms<void, 2, TreeTerm<MyTerms::Raise, CharTerm, '^', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::OddTokens, RegexTerm, Warp::Utilities::FixedString<10>{"[!@#$%&*]"}, Warp::Utilities::FixedString<14>{"GrammarTokens"}, ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Lower, CharTerm, '_', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::Hola, StringTerm, Warp::Utilities::FixedString<5>{"Hola"}, ctpg::associativity::no_assoc> >; auto RightPrecedentParameterConstant = 3; RightTermParameterTypes = {TreeTerm<MyTerms::LeftAngleBracket, CharTerm, '<', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftSquareBracket, CharTerm, '[', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftCurleyBracket, CharTerm, '{', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::LeftParenthesis, CharTerm, '(', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightAngleBracket, CharTerm, '>', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightSquareBracket, CharTerm, ']', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightCurleyBracket, CharTerm, '}', ctpg::associativity::no_assoc>, TreeTerm<MyTerms::RightParenthesis, CharTerm, ')', ctpg::associativity::no_assoc>};

/*root/workdir/Include/Warp/Parsing/Terms.hpp:428:41:   required by substitution of */
template<class LeftTermParameterType, class RightTermParameterType> using MergeTerms = typename decltype (Warp::Parsing::merge_terms(declval<LeftTermParameterType>(), declval<RightTermParameterType>()))::Type [with LeftTermParameterType = Warp::Parsing::Terms<Warp::Parsing::Terms<Warp::Parsing::Terms<void, 1, Warp::Parsing::TreeTerm<MyTerms::Digits, Warp::Parsing::RegexTerm, Warp::Utilities::FixedString<7>{"[0-9]+"}, Warp::Utilities::FixedString<7>{"Digits"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Dot, Warp::Parsing::CharTerm, '.', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Hello, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<6>{"Hello"}, ctpg::associativity::no_assoc> >, 4, Warp::Parsing::TreeTerm<MyTerms::Plus, Warp::Parsing::CharTerm, '+', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Goodbye, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<8>{"Goodbye"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Minus, Warp::Parsing::CharTerm, '-', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::LowercaseLetters, Warp::Parsing::RegexTerm, Warp::Utilities::FixedString<7>{"[a-z]+"}, Warp::Utilities::FixedString<17>{"LowercaseLetters"}, ctpg::associativity::no_assoc> >, 5, Warp::Parsing::TreeTerm<MyTerms::Mumble, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<7>{"Mumble"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Grumble, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<8>{"Grumble"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Fumble, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<7>{"Fumble"}, ctpg::associativity::no_assoc> >; RightTermParameterType = Warp::Parsing::Terms<Warp::Parsing::Terms<void, 2, Warp::Parsing::TreeTerm<MyTerms::Raise, Warp::Parsing::CharTerm, '^', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::OddTokens, Warp::Parsing::RegexTerm, Warp::Utilities::FixedString<10>{"[!@#$%&*]"}, Warp::Utilities::FixedString<14>{"GrammarTokens"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Lower, Warp::Parsing::CharTerm, '_', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Hola, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<5>{"Hola"}, ctpg::associativity::no_assoc> >, 3, Warp::Parsing::TreeTerm<MyTerms::LeftAngleBracket, Warp::Parsing::CharTerm, '<', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::LeftSquareBracket, Warp::Parsing::CharTerm, '[', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::LeftCurleyBracket, Warp::Parsing::CharTerm, '{', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::LeftParenthesis, Warp::Parsing::CharTerm, '(', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::RightAngleBracket, Warp::Parsing::CharTerm, '>', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::RightSquareBracket, Warp::Parsing::CharTerm, ']', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::RightCurleyBracket, Warp::Parsing::CharTerm, '}', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::RightParenthesis, Warp::Parsing::CharTerm, ')', ctpg::associativity::no_assoc> >;

//root/workdir/Test/Terms.cpp:424:5:   required from here
/*root/workdir/Include/Warp/Parsing/Terms.hpp:362:72: error: no matching function for call to */
merge_terms(Warp::Parsing::Terms<void, 1, Warp::Parsing::TreeTerm<MyTerms::Digits, Warp::Parsing::RegexTerm, Warp::Utilities::FixedString<7>{"[0-9]+"}, Warp::Utilities::FixedString<7>{"Digits"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Dot, Warp::Parsing::CharTerm, '.', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Hello, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<6>{"Hello"}, ctpg::associativity::no_assoc> >, Warp::Parsing::Terms<void, 2, Warp::Parsing::TreeTerm<MyTerms::Raise, Warp::Parsing::CharTerm, '^', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::OddTokens, Warp::Parsing::RegexTerm, Warp::Utilities::FixedString<10>{"[!@#$%&*]"}, Warp::Utilities::FixedString<14>{"GrammarTokens"}, ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Lower, Warp::Parsing::CharTerm, '_', ctpg::associativity::no_assoc>, Warp::Parsing::TreeTerm<MyTerms::Hola, Warp::Parsing::StringTerm, Warp::Utilities::FixedString<5>{"Hola"}, ctpg::associativity::no_assoc> >);
/*
  362 |                         using MergedPreviousType = decltype(merge_terms(
      |                                                             ~~~~~~~~~~~^
  363 |                                         std::declval<LeftPreviousType>(),
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  364 |                                         std::declval<RightPreviousType>()
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  365 |                                 ))::Type;
      |                                 ~                                       
*/
